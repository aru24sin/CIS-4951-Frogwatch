import axios from 'axios';
import { Audio } from 'expo-av';
import { getAuth } from 'firebase/auth';
import React, { useEffect, useState } from 'react';
import { ActivityIndicator, FlatList, Image, ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import MapView, { Marker } from 'react-native-maps';

interface Recording {
  recordingId: string;
  userId: string;
  species: string;
  predictedSpecies: string;
  audioURL: string;
  location: {
    latitude: number;
    longitude: number;
  };
  status: string;
  timestamp: string;
  confidence?: number;
}

const speciesImageMap: { [key: string]: string } = {
  'American Bullfrog': require('../../assets/frogs/bullfrog.png'),
  'Green Treefrog': require('../../assets/frogs/treefrog.png'),
  'Spring Peeper': require('../../assets/frogs/spring_peeper.png'),
  'Northern Leopard Frog': require('../../assets/frogs/northern_leopard.png'),
  'Gray Treefrog': require('../../assets/frogs/gray_treefrog.png'),
};

const placeholderImage = require('../../assets/frogs/placeholder.png');

const HistoryScreen = () => {
  const [recordings, setRecordings] = useState<Recording[]>([]);
  const [loading, setLoading] = useState(true);
  const [sound, setSound] = useState<Audio.Sound | null>(null);

  useEffect(() => {
    const fetchRecordings = async () => {
      try {
        const auth = getAuth();
        const user = auth.currentUser;
        if (!user) return;

        const response = await axios.get('https://your-backend-url.com/recordings');
        const userRecordings = response.data.filter((r: Recording) => r.userId === user.uid);
        setRecordings(userRecordings);
      } catch (error) {
        console.error('Error fetching recordings:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchRecordings();

    return () => {
      if (sound) sound.unloadAsync();
    };
  }, []);

  const handlePlay = async (uri: string) => {
    try {
      if (sound) {
        await sound.unloadAsync();
      }
      const { sound: newSound } = await Audio.Sound.createAsync({ uri });
      setSound(newSound);
      await newSound.playAsync();
    } catch (error) {
      console.error('Audio play error:', error);
    }
  };

  const renderRecording = ({ item }: { item: Recording }) => {
    const image = speciesImageMap[item.predictedSpecies] || placeholderImage;
    return (
      <View style={styles.card}>
        <Image source={image} style={styles.image} />
        <Text style={styles.title}>{item.predictedSpecies}</Text>
        <Text>Confidence: {item.confidence ?? 'N/A'}%</Text>
        <Text>Location: {item.location.latitude.toFixed(4)}, {item.location.longitude.toFixed(4)}</Text>
        <TouchableOpacity style={styles.button} onPress={() => handlePlay(item.audioURL)}>
          <Text style={styles.buttonText}>Play / Replay</Text>
        </TouchableOpacity>
      </View>
    );
  };

  if (loading) return <ActivityIndicator size="large" style={{ marginTop: 50 }} />;

  return (
    <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
      <MapView
        style={{ height: 300 }}
        initialRegion={{
          latitude: recordings[0]?.location.latitude || 0,
          longitude: recordings[0]?.location.longitude || 0,
          latitudeDelta: 5,
          longitudeDelta: 5,
        }}
      >
        {recordings.map((rec) => (
          <Marker
            key={rec.recordingId}
            coordinate={{
              latitude: rec.location.latitude,
              longitude: rec.location.longitude,
            }}
            title={rec.predictedSpecies}
            description={`Confidence: ${rec.confidence ?? 'N/A'}%`}
          />
        ))}
      </MapView>

      <FlatList
        data={recordings}
        keyExtractor={(item) => item.recordingId}
        renderItem={renderRecording}
        contentContainerStyle={{ padding: 10 }}
      />
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  card: {
    backgroundColor: '#f0f8ff',
    padding: 15,
    borderRadius: 10,
    marginBottom: 15,
    borderWidth: 1,
    borderColor: '#007AFF',
  },
  image: {
    width: '100%',
    height: 180,
    borderRadius: 8,
  },
  title: {
    fontSize: 18,
    fontWeight: '600',
    marginVertical: 5,
  },
  button: {
    backgroundColor: '#007AFF',
    padding: 10,
    marginTop: 10,
    borderRadius: 8,
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
});

export default HistoryScreen;
